namespace threerings.export2 {

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

using Ionic.Zlib;

using threerings.trinity.util;

using threerings.export2.impl;

/**
 * Imports from the compact binary format generated by {@link BinaryExporter}.
 */
public class BinaryImporter : Importer
{
    /**
     * Creates an importer to read from the specified stream.
     *
     * @param disposeBase whether to Dispose() the underlying stream when we're disposed.
     */
    public BinaryImporter (Stream inStream, bool disposeBase = true)
    {
        _in = inStream;
        _disposeBase = disposeBase;
    }

    override
    public object readObject ()
    {
        return readObject<object>();
    }

    override
    public T readObject<T> ()
    {
        if (_in == null) {
            throw new EndOfStreamException("importer already closed");

        } else if (_ctx == null) {
            ImportContext ctx = new ImportContext(_in);

            // verify the preamble
            uint magic = (uint)ctx.readInt();
            if (magic != BinaryExporter.MAGIC_NUMBER) {
                throw new Exception("Invalid magic number [magic=" + magic.ToString("X") + "].");
            }
            byte version = (byte)ctx.readSbyte();
            switch (version) {
            case BinaryExporter.VERSION:
                // that's our version!
                break;

            case 0x10: // old export 1.0 mode
                MemoryStream mem = new MemoryStream();
                mem.WriteByte(0xFA);
                mem.WriteByte(0xCE);
                mem.WriteByte(0xAF);
                mem.WriteByte(0x0E);
                mem.WriteByte(0x10);
                // read the rest into the same byte[]...
                const int BUF_SIZE = 4096;
                byte[] buf = new byte[BUF_SIZE];
                while (true) {
                    int count = _in.Read(buf, 0, BUF_SIZE);
                    if (count == 0) {
                        break;
                    }
                    mem.Write(buf, 0, count);
                }
                mem.Position = 0;
                // TODO: dispose base here?
                return new threerings.export.BinaryImporter(mem).readObject<T>();

            default:
                throw new Exception(string.Format("Invalid version [version=%d].", version));
            }

            int flags = Streams.readVarInt(_in);
            bool compressed = (flags & BinaryExporter.COMPRESSED_FORMAT_FLAG) != 0;

            // the rest of the stream may be compressed
            if (compressed) {
                ctx.stream = _in = new ZlibStream(_in, CompressionMode.Decompress, !_disposeBase);
            }

            _ctx = ctx;
        }

        return (T)_ctx.readObject(ObjectTypeData.INSTANCE);
    }

    override
    public void Dispose ()
    {
        if (_disposeBase || (_in is ZlibStream)) {
            _in.Dispose();
        }
    }

    /** The stream that we use for reading data. */
    protected Stream _in;

    /** Should we dispose our base stream when we're disposed? */
    protected readonly bool _disposeBase;

    protected ImportContext _ctx;
}
}
